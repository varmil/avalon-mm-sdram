// ============================================================================
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| George Totolos    :| 08/22/2016:| Initial Revision
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [27:0] counter;
reg readOrWriteEnable; // 0: read wire can assert, 1: write wire can assert
reg alreadyRunning; // 0: R or W operation is not yet unning in this 0.5 sec

// output from avalon-mm
wire waitrequest;
reg [31:0] readdata;
wire readdatavalid;
// input to avalon-mm
wire burstcount = 1; // zero is prohibitted
reg [31:0] writedata;
reg [25:0] address;
wire write;
wire read;
wire [3:0] byteenable = 4'b1111;
reg debugaccess;

assign HEX0 = 8'h1;



//=======================================================
//  Structural coding
//=======================================================
avalon u0 (
	.new_sdram_controller_0_wire_addr  (DRAM_ADDR),  // new_sdram_controller_0_wire.addr
	.new_sdram_controller_0_wire_ba    (DRAM_BA),    //                            .ba
	.new_sdram_controller_0_wire_cas_n (DRAM_CAS_N), //                            .cas_n
	.new_sdram_controller_0_wire_cke   (DRAM_CKE),   //                            .cke
	.new_sdram_controller_0_wire_cs_n  (DRAM_CS_N),  //                            .cs_n
	.new_sdram_controller_0_wire_dq    (DRAM_DQ),    //                            .dq
	.new_sdram_controller_0_wire_dqm   ({DRAM_UDQM, DRAM_LDQM}),   //              .dqm
	.new_sdram_controller_0_wire_ras_n (DRAM_RAS_N), //                            .ras_n
	.new_sdram_controller_0_wire_we_n  (DRAM_WE_N),  //                            .we_n
	.clk_clk                           (MAX10_CLK1_50),            //              clk.clk
	.reset_reset_n                     (KEY[0]),     //                            reset.reset_n
	.sys_sdram_pll_0_sdram_clk_clk     (DRAM_CLK),    //                            sys_sdram_pll_0_sdram_clk.clk

	.mm_bridge_0_s0_waitrequest        (waitrequest),        //              mm_bridge_0_s0.waitrequest
	.mm_bridge_0_s0_readdata           (readdata),           //                            .readdata
	.mm_bridge_0_s0_readdatavalid      (readdatavalid),      //                            .readdatavalid
	.mm_bridge_0_s0_burstcount         (burstcount),         //                            .burstcount
	.mm_bridge_0_s0_writedata          (writedata),          //                            .writedata
	.mm_bridge_0_s0_address            (address),            //                            .address
	.mm_bridge_0_s0_write              (write),              //                            .write
	.mm_bridge_0_s0_read               (read),               //                            .read
	.mm_bridge_0_s0_byteenable         (byteenable),         //                            .byteenable
	.mm_bridge_0_s0_debugaccess        (debugaccess)         //                            .debugaccess
);

SevenSegDecoder seg01(readdata[7:0],  HEX3, HEX2);
SevenSegDecoder seg23(readdata[15:8], HEX5, HEX4);

always @ (posedge MAX10_CLK1_50) begin
	if (SW[9]) begin
		counter <= 0;
		alreadyRunning <= 0;
		readOrWriteEnable <= 0;
		writedata <= 0;
	end
	// counter
	else if (counter == 28'd12500000) begin // 0.5 sec
	 	counter <= 0;
		readOrWriteEnable <= ~readOrWriteEnable;
		alreadyRunning <= 0;
	end
	else
		counter <= counter + 1;

	// R/W operation
	if (read) begin
		address <= 0;
		alreadyRunning <= 1;
	end else if (write) begin
		address <= 0;
		writedata <= writedata + 1;
		alreadyRunning <= 1;
	end
end

// R/W wire assert duration is 1 cycle
assign read  = (~readOrWriteEnable & ~waitrequest & ~alreadyRunning);
assign write = ( readOrWriteEnable & ~waitrequest & ~alreadyRunning);

// for debug
assign LEDR[0] = alreadyRunning;
assign LEDR[1] = read;
assign LEDR[2] = write;

endmodule



// DE-10 Lite is ActiveLow
// 8bit input --> two hex
module SevenSegDecoder(input wire [7:0] in, output reg [7:0] HEXHigh, output reg [7:0] HEXLow);
  always @(*) begin
    case (in[3:0])
      4'h0 : HEXLow = 8'b1100_0000;
      4'h1 : HEXLow = 8'b1111_1001;
      4'h2 : HEXLow = 8'b1010_0100;
      4'h3 : HEXLow = 8'b1011_0000;
      4'h4 : HEXLow = 8'b1001_1001;
      4'h5 : HEXLow = 8'b1001_0010;
      4'h6 : HEXLow = 8'b1000_0010;
      4'h7 : HEXLow = 8'b1101_1000;
      4'h8 : HEXLow = 8'b1000_0000;
      4'h9 : HEXLow = 8'b1001_0000;
      4'ha : HEXLow = 8'b0000_1000;
      4'hb : HEXLow = 8'b0000_0011;
      4'hc : HEXLow = 8'b1010_0111;
      4'hd : HEXLow = 8'b1010_0001;
      4'he : HEXLow = 8'b0000_0110;
      4'hf : HEXLow = 8'b1000_1110;
    endcase
  end

  always @(*) begin
    case (in[7:4])
      4'h0 : HEXHigh = 8'b1100_0000;
      4'h1 : HEXHigh = 8'b1111_1001;
      4'h2 : HEXHigh = 8'b1010_0100;
      4'h3 : HEXHigh = 8'b1011_0000;
      4'h4 : HEXHigh = 8'b1001_1001;
      4'h5 : HEXHigh = 8'b1001_0010;
      4'h6 : HEXHigh = 8'b1000_0010;
      4'h7 : HEXHigh = 8'b1101_1000;
      4'h8 : HEXHigh = 8'b1000_0000;
      4'h9 : HEXHigh = 8'b1001_0000;
      4'ha : HEXHigh = 8'b0000_1000;
      4'hb : HEXHigh = 8'b0000_0011;
      4'hc : HEXHigh = 8'b1010_0111;
      4'hd : HEXHigh = 8'b1010_0001;
      4'he : HEXHigh = 8'b0000_0110;
      4'hf : HEXHigh = 8'b1000_1110;
    endcase
  end
endmodule
